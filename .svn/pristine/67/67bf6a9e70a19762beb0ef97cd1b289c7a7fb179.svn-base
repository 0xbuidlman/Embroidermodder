#include "stdafx.h"
#include <stdio.h>
#include <fcntl.h>
#include <io.h>
#include <math.h>
#include "pattern.h"
#include "helpers.h"
#include "paint.h"
#include "MainFrm.h"
#include "Messaging.h"

extern CEmbroidermodderApp theApp;
// Procedures
class Ksm : public IEmbroideryReader
{
private:
void ksm_encode(unsigned char *b,char dx,char dy,int flags)
{
	unsigned char rx=0;
	unsigned char ry=0;
	
	if (flags==JUMP)
	{
		b[0]=128;
		b[1]=2;
		b[2]=dx;
		b[3]=dy;
	}
	else if (flags==STOP)
	{
		b[0]=128;
		b[1]=1;
		b[2]=dx;
		b[3]=dy;
	}
	else
	{
		b[0]=dx;
		b[1]=dy;
	}
}

public:
virtual BOOL Read(class pattern *pattern, const char *filename) {
	FILE *dstin;
	int i=0;
	int b0=0,b1=0,b2=0;
	char dx=0,dy=0;
	int flags=0;
	dstin = fopen(filename,"r");

	if (dstin==0) {
		theApp.status.set("Error opening KSM file for read:",filename);
		pattern->messages.add("Error opening KSM file for read:",filename);
		return(false);
	};

	_setmode( _fileno( dstin ), _O_BINARY );
	pattern->clear();
	pattern->set_variable("file_name",filename);
	pattern->messages.add("Begin reading stitches:");
	fseek (dstin,512,SEEK_SET);
	//READ STITCH RECORDS
	for (i=0;!feof(dstin);i++) {
		flags = NORMAL;
		b0=fgetc(dstin);
		if (feof(dstin)) break;
		b1=fgetc(dstin);
		if (feof(dstin)) break;
		b2=fgetc(dstin);
		if (feof(dstin)) break;
		if ((b2 & 25) == 0)
		{
			if ((b2 & 64) > 0)
			{
				b1=-b1;
			}
			if ((b2 & 32) > 0)
			{
				b0=-b0;
			}
			flags=NORMAL;
			pattern->AddStitchRel((double)b1 /10.0, (double) b0 /10.0, flags);
		}else
		{
			flags=STOP;
			pattern->AddStitchRel((double)b1 /10.0, (double) b0 /10.0, flags);
		}
	};	
	pattern->AddStitchRel((double)b1 /10.0, (double) b0 /10.0, END);
	fclose(dstin);
	//pattern->print_stitchlist("cherry.txt");
	return(true);
};
virtual BOOL Write(class pattern *pattern, const char *filename) 
{
	FILE *ksmout;
	int xx=0,yy=0,dx=0,dy=0,flags=0;
	int i=0;
	unsigned char b[4];
	int inserts=0;

	if (pattern->stitches==0) {

		theApp.status.set("No file to save.");
		fprintf(stderr,"No file to save\n");
		return (false);

	};

	ksmout = fopen(filename,"w");
	if (ksmout==0) {
		theApp.status.set("Error opening ksm file for write:",filename);
		return(false);
	};
	_setmode( _fileno( ksmout ), _O_BINARY );
	//first pass through pattern calculating extents
	xx=yy=0;
	flags=NORMAL;
	for (i=0;flags!=END;i++){
		if (i>pattern->stitches) break;
		dx=round(pattern->stitchlist[i].xx*10.0) - xx;
		dy=round(pattern->stitchlist[i].yy*10.0) - yy;
	// insert jump point if out of range.
		if (abs(dx)>255 || abs(dy)>255) {
			double fxx,fyy,fdx,fdy;
			fxx=pattern->stitchlist[i-1].xx*10.0;
			// use doubles to do insert calculation
			fyy=pattern->stitchlist[i-1].yy*10.0;
			fdx=pattern->stitchlist[i].xx*10.0 - fxx;
			fdy=pattern->stitchlist[i].yy*10.0 - fyy;
			int splits; // number of stitches to split overlength one into
			if (abs(dx)>abs(dy)) {
				splits = round(ceil(fabs((double)dx)/255.0));
			} else {
				splits = round(ceil(fabs((double)dy)/255.0));
			};
			for (int j=1;j<splits;j++) {
				pattern->AddStitchAbs(fxx+fdx*j/splits,fyy+fdy*j/splits,JUMP);
				pattern->move_last_stitch(i+j-1);
				inserts++;
			};
		};
		xx=round(pattern->stitchlist[i].xx * 10.0); // convert from mm to 0.1mm for file format
		yy=round(pattern->stitchlist[i].yy * 10.0);
		flags=pattern->stitchlist[i].flags;
	};
	//write stitches
	xx=yy=0;
	for (i=0;i<pattern->stitches;i++) {
		dx=round(pattern->stitchlist[i].xx*10.0) - xx;
		dy=round(pattern->stitchlist[i].yy*10.0) - yy;
		xx=round(pattern->stitchlist[i].xx*10.0);
		yy=round(pattern->stitchlist[i].yy*10.0);
		flags=pattern->stitchlist[i].flags;
		ksm_encode(b,dx,dy,flags);
		fprintf(ksmout,"%c%c",b[0],b[1]);
	};
	fprintf(ksmout,"\x1a");
	// finish file with a terminator character
	//close file
	fclose(ksmout);
	return(true);
};
};