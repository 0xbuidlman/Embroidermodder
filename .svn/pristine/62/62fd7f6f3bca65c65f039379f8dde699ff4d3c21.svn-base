// EmbroideryDoc.cpp : implementation of the CEmbroideryDoc class
//
// This sourcecode file is a part of embroidermodder.
// This program is free software; you can use, redistribute, and/or modify it
// under the terms of the GNU General Puplic License (GPL) as published by
// the Free Software Foundation.  See the file license.txt for details.
// http://embroidermodder.sourceforge.net/
//

#include "stdafx.h"
#include "embroidermodder.h"

#include "pattern.h"
#include "EmbroideryDoc.h"
#include "helpers.h"
#include "Messaging.h"
#include "analyze.h"
#include "EmbroideryView.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

extern CEmbroidermodderApp theApp;
/////////////////////////////////////////////////////////////////////////////
// CEmbroideryDoc

IMPLEMENT_DYNCREATE(CEmbroideryDoc, CDocument)

BEGIN_MESSAGE_MAP(CEmbroideryDoc, CDocument)
	//{{AFX_MSG_MAP(CEmbroideryDoc)
	ON_COMMAND(ID_VIEW_CLEAR_TEXT, OnViewClearText)
	ON_COMMAND(ID_VIEW_STATISTICS, OnViewStatistics)
	ON_COMMAND(ID_VIEW_ANALYZE, OnViewAnalyze)
	ON_COMMAND(ID_EDIT_ENLARGE, OnEditEnlarge)
	ON_COMMAND(ID_EDIT_REDUCE, OnEditReduce)
	ON_COMMAND(ID_FILE_SAVE, OnFileSave)
	ON_COMMAND(ID_FILE_SAVE_AS, OnFileSaveAs)
	ON_COMMAND(ID_MODE_SELECT_POINTS, OnModeSelectPoints)
	ON_UPDATE_COMMAND_UI(ID_MODE_SELECT_POINTS, OnUpdateModeSelectPoints)
	ON_COMMAND(ID_MODE_INSERT, OnModeInsert)
	ON_UPDATE_COMMAND_UI(ID_MODE_INSERT, OnUpdateModeInsert)
	/*ON_COMMAND(ID_DEBUG_BREAKTODEBUGGER_DOC, OnDebugBreaktodebuggerDoc)
	ON_UPDATE_COMMAND_UI(ID_DEBUG_BREAKTODEBUGGER_DOC, OnUpdateDebugBreaktodebuggerDoc)*/
	ON_COMMAND(ID_MODE_SELECT_LINES, OnModeSelectLines)
	ON_UPDATE_COMMAND_UI(ID_MODE_SELECT_LINES, OnUpdateModeSelectLines)
	ON_COMMAND(ID_MODE_SELECT, OnModeSelect)
	ON_UPDATE_COMMAND_UI(ID_MODE_SELECT, OnUpdateModeSelect)
	ON_COMMAND(ID_MODE_MOVE, OnModeMove)
	ON_UPDATE_COMMAND_UI(ID_MODE_MOVE, OnUpdateModeMove)
	ON_COMMAND(ID_MODE_DELETE, OnModeDelete)
	ON_UPDATE_COMMAND_UI(ID_MODE_DELETE, OnUpdateModeDelete)
	ON_COMMAND(ID_EDIT_COPY, OnEditCopy)
	ON_COMMAND(ID_EDIT_PASTE, OnEditPaste)
	ON_UPDATE_COMMAND_UI(ID_EDIT_PASTE, OnUpdateEditPaste)
	ON_COMMAND(ID_EDIT_CUT, OnEditCut)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CEmbroideryDoc construction/destruction

CEmbroideryDoc::CEmbroideryDoc()
{
	// TODO: add one-time construction code here
}

CEmbroideryDoc::~CEmbroideryDoc()
{
}

BOOL CEmbroideryDoc::OnNewDocument()
{
	static int first_run=0;
	if(first_run==0) {
		// prevent a new blank document being created when app is first launched
		first_run=1;
		return(FALSE);
	};
	if (!CDocument::OnNewDocument())
		return FALSE;

	// TODO: add reinitialization code here
	// (SDI documents will reuse this document)

	theApp.status.updateall(&pattern);

	return TRUE;
}



/////////////////////////////////////////////////////////////////////////////
// CEmbroideryDoc serialization

//DEL void CEmbroideryDoc::Serialize(CArchive& ar)
//DEL {
//DEL 	ASSERT(FALSE);	// Don't use Serialize!!!
//DEL 	if (ar.IsStoring())
//DEL 	{
//DEL //		pattern.save(ar.GetFile());
//DEL 		// TODO: add storing code here
//DEL 	}
//DEL 	else
//DEL 	{
//DEL //		pattern.load(ar.GetFile());
//DEL 		// TODO: add loading code here
//DEL 	}
//DEL }

/////////////////////////////////////////////////////////////////////////////
// CEmbroideryDoc diagnostics

#ifdef _DEBUG
void CEmbroideryDoc::AssertValid() const
{
	CDocument::AssertValid();
}

void CEmbroideryDoc::Dump(CDumpContext& dc) const
{
	CDocument::Dump(dc);
}
#endif //_DEBUG

BOOL CEmbroideryDoc::OnOpenDocument(LPCTSTR lpszPathName) 
{

	BOOL success;

//	if (!CDocument::OnOpenDocument(lpszPathName))
//		return FALSE;
	
	DeleteContents();

	pattern.messages.clear();
	pattern.config.scale=1.0; // reset the scale for new file

	success=FALSE;
//	CFileDialog fileDlg(TRUE, NULL, NULL, NULL, FileFormatsString);
//	if (fileDlg.DoModal()==IDOK) {

		//CString extension = fileDlg.GetFileExt();
		//CString pathName = fileDlg.GetPathName();

		success = pattern.Read(lpszPathName);
		if(success)
		{
			theApp.status.set("Done loading",lpszPathName);
		} else {
			theApp.status.set("Error: Unknown file type");
			AfxMessageBox("Error: Unknwon file type");
			success=FALSE;
		};
		theApp.status.updateall(&pattern);
	//};
	//force_refresh_all();

	UpdateAllViews(NULL);

	SetModifiedFlag(FALSE);

	return (success);
}

BOOL CEmbroideryDoc::OnSaveDocument(LPCTSTR lpszPathName) 
{
	BOOL success;
	success=FALSE;
//	CFileDialog fileDlg(FALSE, ".csv", NULL, OFN_HIDEREADONLY, FileFormatsString);
	
//	if (fileDlg.DoModal()==IDOK) {
//		CString extension = fileDlg.GetFileExt();
//		CString pathName = fileDlg.GetPathName();
	success = pattern.Write(lpszPathName);
	theApp.status.set("Done saving",lpszPathName);
			
//		CString fileName = fileDlg.GetFileTitle();
		//SetWindowText(fileName);
//	};
	//force_refresh_all();
	theApp.status.updateall(&pattern);

	UpdateAllViews(NULL);
	SetModifiedFlag(FALSE);
	
//	return CDocument::OnSaveDocument(lpszPathName);
	return(success);
}

void CEmbroideryDoc::DeleteContents() 
{
	// Re-initialize everything ready for first use, re-use, or discarding this document.
	pattern.clear();
	doc_mousemode=DOC_MOUSEMODE_SELECT;
	doc_selectmode=DOC_SELECTMODE_LINES;

	CDocument::DeleteContents();
}

void CEmbroideryDoc::OnViewClearText() 
{
	pattern.messages.clear();
	UpdateAllViews(NULL);
}

void CEmbroideryDoc::OnViewStatistics() {
	theApp.status.set("Calculating Statistics.");

	pattern.statistics();

	theApp.status.clear();
	UpdateAllViews(NULL);

}

void CEmbroideryDoc::OnViewAnalyze() 
{
	theApp.status.set("Running analysis");

	find_lines(&pattern);

	UpdateAllViews(NULL);

}

void CEmbroideryDoc::OnEditEnlarge() 
{
	double scaleamount;
	theApp.status.set("Enlarging pattern.");

	UpdateAllViews(NULL,HINT_REMEMBER_THIS_SCROLL_POINT);
	scaleamount=6.0/5.0;
	pattern.config.scale *= scaleamount;
	pattern.scale_pattern(scaleamount);

	OnViewStatistics();
	theApp.status.clear();
	theApp.status.updateall(&pattern);
	UpdateAllViews(NULL,HINT_PATTERN_CHANGED_SIZE, (CObject *)&scaleamount); // include hint about size change
			// uses scaleamount to automatically adjust remembered scrollpoint from last call above
}

void CEmbroideryDoc::OnEditReduce() 
{
	double scaleamount;
	theApp.status.set("Reducing pattern.");

	UpdateAllViews(NULL,HINT_REMEMBER_THIS_SCROLL_POINT);
	scaleamount=5.0/6.0;
	pattern.config.scale *= scaleamount;
	pattern.scale_pattern(scaleamount);

	OnViewStatistics();
	theApp.status.clear();
	theApp.status.updateall(&pattern);
	UpdateAllViews(NULL,HINT_PATTERN_CHANGED_SIZE, (CObject *)&scaleamount); // include hint about size change
			// uses scaleamount to automatically adjust remembered scrollpoint from last call above
}

void CEmbroideryDoc::OnFileSaveAs()
{
	char FileFormatsString[]=FILE_FORMATS_STRING;
	CString newName;

	// prompt the user (with all document templates)
    CFileDialog fileDlg(FALSE, ".csv", NULL, OFN_HIDEREADONLY, FileFormatsString);
	if (fileDlg.DoModal()==IDOK) {

		//CString extension = fileDlg.GetFileExt();
		newName = fileDlg.GetPathName();
		DoSave(newName,TRUE);
		SetPathName(newName,TRUE);
		SetTitle(fileDlg.GetFileName());
	};
}

void CEmbroideryDoc::OnFileSave()
{
	CString path = GetPathName();
	if (path.IsEmpty()) {
		// no filename, so do a Save As
		OnFileSaveAs();
	} else {
		// save over existing filename
		DoSave(path,TRUE);
	};
};


//////////////////////////////////////////////////////////////////////
// Toolbar button press handlers

void CEmbroideryDoc::OnModeSelectPoints() 
{
	doc_selectmode = DOC_SELECTMODE_POINTS;
	UpdateAllViews(NULL);
}

void CEmbroideryDoc::OnModeSelectLines() 
{
	doc_selectmode = DOC_SELECTMODE_LINES;
	UpdateAllViews(NULL);
}


void CEmbroideryDoc::OnModeSelect() 
{
	doc_mousemode = DOC_MOUSEMODE_SELECT;
	UpdateAllViews(NULL);
}

void CEmbroideryDoc::OnModeMove() 
{
	doc_mousemode = DOC_MOUSEMODE_MOVE;
	UpdateAllViews(NULL);
}

void CEmbroideryDoc::OnModeInsert() 
{
	doc_mousemode = DOC_MOUSEMODE_INSERT;
	UpdateAllViews(NULL);
}

void CEmbroideryDoc::OnModeDelete() 
{
	doc_mousemode = DOC_MOUSEMODE_DELETE;
	UpdateAllViews(NULL);
}

//////////////////////////////////////////////////////////////////////
// Toolbar State Display Handlers
//  Called before button or menu is displayed to update current state

void CEmbroideryDoc::OnUpdateModeSelectPoints(CCmdUI* pCmdUI) 
{
	pCmdUI->SetCheck(doc_selectmode==DOC_SELECTMODE_POINTS);
}

void CEmbroideryDoc::OnUpdateModeSelectLines(CCmdUI* pCmdUI) 
{
	pCmdUI->SetCheck(doc_selectmode==DOC_SELECTMODE_LINES);
}


void CEmbroideryDoc::OnUpdateModeSelect(CCmdUI* pCmdUI) 
{
	pCmdUI->SetCheck(doc_mousemode==DOC_MOUSEMODE_SELECT);
}

void CEmbroideryDoc::OnUpdateModeMove(CCmdUI* pCmdUI) 
{
	pCmdUI->SetCheck(doc_mousemode==DOC_MOUSEMODE_MOVE);
}

void CEmbroideryDoc::OnUpdateModeInsert(CCmdUI* pCmdUI) 
{
	pCmdUI->SetCheck(doc_mousemode==DOC_MOUSEMODE_INSERT);
}

void CEmbroideryDoc::OnUpdateModeDelete(CCmdUI* pCmdUI) 
{
	pCmdUI->SetCheck(doc_mousemode==DOC_MOUSEMODE_DELETE);
}

// global variable
class pattern clipboard;

void CEmbroideryDoc::OnEditCopy() 
{
	int i;
	clipboard.clear();
	for (i=0;i<pattern.stitches;i++) {
		if (pattern.stitchlist[i].selected) {
			clipboard.AddStitchAbs(pattern.stitchlist[i].xx,pattern.stitchlist[i].yy,pattern.stitchlist[i].flags,TRUE);
		};
	};
}

void CEmbroideryDoc::OnEditCut() 
{
	OnEditCopy();
	pattern.delete_selected();
	UpdateAllViews(NULL,HINT_PATTERN_CHANGED);
}

void CEmbroideryDoc::OnEditPaste() 
{
	int i;
	// TODO: Add your command handler code here
	for (i=0;i<clipboard.stitches;i++) {
		pattern.AddStitchAbs(clipboard.stitchlist[i].xx,clipboard.stitchlist[i].yy,clipboard.stitchlist[i].flags,TRUE);
	};	
	UpdateAllViews(NULL,HINT_PATTERN_CHANGED);
}

void CEmbroideryDoc::OnUpdateEditPaste(CCmdUI* pCmdUI) 
{
	pCmdUI->Enable(clipboard.stitches>0);	
}

