#include "stdafx.h"
#include <stdio.h>
#include <fcntl.h>
#include <io.h>
#include <math.h>
#include "pattern.h"
#include "helpers.h"
#include "paint.h"
#include "MainFrm.h"
#include "Messaging.h"
#include "IEmbroideryReader.h"

extern CEmbroidermodderApp theApp;
//Procedures

class Hus : public IEmbroideryReader
{
private:



short hus_decode(unsigned char a1,unsigned char a2)
{
	unsigned short res=(a2 << 8)+a1;
	if (res > 32767)
		return((-~res)-1);
	else
		return (res);
};

public:
virtual BOOL Read(class pattern *pattern, const char *filename)
{

	static const BYTE cRGB[][3]={{0,0,0},{0,0,255},{0,255,0},{255,0,0},{255,0,255},{255,255,0},{127,127,127},
{51,154,255},{51,204,102},{255,127,0},{255,160,180},{153,75,0},{255,255,255},{0,0,127},
{0,127,0},{127,0,0},{255,127,127},{127,0,127},{255,127,255},{200,200,0},{255,255,153},
{60,60,60},{192,192,192},{232,63,0},{255,165,65},{255,102,122},{255,204,204},{115,40,0},{175,90,10}};

static const char *cName[]={"Black","Blue","Light Green","Red","Purple","Yellow","Gray","Light Blue","Green",
"Orange","Pink","Brown","White","Dark Blue","Dark Green","Dark Red","Light Red","Dark Purple",
"Light Purple","Dark Yellow","Light Yellow","Dark Gray","Light Gray","Dark Orange","Light Orange",
"Dark Pink","Light Pink","Dark Brown","Light Brown"};

static const BYTE decodeTbl[]={0x2E,82,0xE4,0x6F,0x38,0xA9,0xDC,0xC6,0x7B,0xB6,0x28,0xAC,0xFD,0xAA,0x8A,0x4E,
0x76,0x2E,0xF0,0xE4,0x25,0x1B,0x8A,0x68,0x4E,0x92,0xB9,0xB4,0x95,0xF0,0x3E,0xEF,
0xF7,0x40,0x24,0x18,0x39,0x31,0xBB,0xE1,0x53,0xA8,0x1F,0xB1,0x3A,0x07,0xFB,0xCB,
0xE6,0x00,0x81,0x50,0x0E,0x40,0xE1,0x2C,0x73,0x50,0x0D,0x91,0xD6,0x0A,0x5D,0xD6,
0x8B,0xB8,0x62,0xAE,0x47,0x00,0x53,0x5A,0xB7,0x80,0xAA,0x28,0xF7,0x5D,0x70,0x5E,
0x2C,0x0B,0x98,0xE3,0xA0,0x98,0x60,0x47,0x89,0x9B,0x82,0xFB,0x40,0xC9,0xB4,0x00,
0x0E,0x68,0x6A,0x1E,0x09,0x85,0xC0,0x53,0x81,0xD1,0x98,0x89,0xAF,0xE8,0x85,0x4F,
0xE3,0x69,0x89,0x03,0xA1,0x2E,0x8F,0xCF,0xED,0x91,0x9F,0x58,0x1E,0xD6,0x84,0x3C,
0x09,0x27,0xBD,0xF4,0xC3,0x90,0xC0,0x51,0x1B,0x2B,0x63,0xBC,0xB9,0x3D,0x40,0x4D,
0x62,0x6F,0xE0,0x8C,0xF5,0x5D,0x08,0xFD,0x3D,0x50,0x36,0xD7,0xC9,0xC9,0x43,0xE4,
0x2D,0xCB,0x95,0xB6,0xF4,0x0D,0xEA,0xC2,0xFD,0x66,0x3F,0x5E,0xBD,0x69,0x06,0x2A,
0x03,0x19,0x47,0x2B,0xDF,0x38,0xEA,0x4F,0x80,0x49,0x95,0xB2,0xD6,0xF9,0x9A,0x75,
0xF4,0xD8,0x9B,0x1D,0xB0,0xA4,0x69,0xDB,0xA9,0x21,0x79,0x6F,0xD8,0xDE,0x33,0xFE,
0x9F,0x04,0xE5,0x9A,0x6B,0x9B,0x73,0x83,0x62,0x7C,0xB9,0x66,0x76,0xF2,0x5B,0xC9,
0x5E,0xFC,0x74,0xAA,0x6C,0xF1,0xCD,0x93,0xCE,0xE9,0x80,0x53,0x03,0x3B,0x97,0x4B,
0x39,0x76,0xC2,0xC1,0x56,0xCB,0x70,0xFD,0x3B,0x3E,0x52,0x57,0x81,0x5D,0x56,0x8D,
0x51,0x90,0xD4,0x76,0xD7,0xD5,0x16,0x02,0x6D,0xF2,0x4D,0xE1,0x0E,0x96,0x4F,0xA1,
0x3A,0xA0,0x60,0x59,0x64,0x04,0x1A,0xE4,0x67,0xB6,0xED,0x3F,0x74,0x20,0x55,0x1F,
0xFB,0x23,0x92,0x91,0x53,0xC8,0x65,0xAB,0x9D,0x51,0xD6,0x73,0xDE,0x01,0xB1,0x80,
0xB7,0xC0,0xD6,0x80,0x1C,0x2E,0x3C,0x83,0x63,0xEE,0xBC,0x33,0x25,0xE2,0x0E,0x7A,
0x67,0xDE,0x3F,0x71,0x14,0x49,0x9C,0x92,0x93,0x0D,0x26,0x9A,0x0E,0xDA,0xED,0x6F,
0xA4,0x89,0x0C,0x1B,0xF0,0xA1,0xDF,0xE1,0x9E,0x3C,0x04,0x78,0xE4,0xAB,0x6D,0xFF,
0x9C,0xAF,0xCA,0xC7,0x88,0x17,0x9C,0xE5,0xB7,0x33,0x6D,0xDC,0xED,0x8F,0x6C,0x18,
0x1D,0x71,0x06,0xB1,0xC5,0xE2,0xCF,0x13,0x77,0x81,0xC5,0xB7,0x0A,0x14,0x0A,0x6B,
0x40,0x26,0xA0,0x88,0xD1,0x62,0x6A,0xB3,0x50,0x12,0xB9,0x9B,0xB5,0x83,0x9B,0x37};


	char header[65];
	// The header seems to contain information about the design
	FILE *dstin;
	int i;
	// for converting stitches from file encoding

	unsigned char b0,b1,b2,b3,numColors,numColors2;
	unsigned short PECData=0,PECData2=0;
	char husColor=0;
	int st=0,co=0;
	short dx,dy,odx=0,ody=0;

	bool notDone=true;
	bool firstTime=true;
	bool colFound=false;
	int flags;

	//for calculating extents
	int posx=100,negx=-100,posy=100,negy=-100;
	dstin = fopen(filename,"r");

	if (dstin==0) {
		theApp.status.set("Error opening hus file for read:",filename);
		pattern->messages.add("Error opening hus file for read:",filename);
		return(false);
	};

	_setmode( _fileno( dstin ), _O_BINARY );

	// TODO:It would probably be a good idea to validate file before accepting it.
	// READ AND PARSE HEADER

	pattern->clear();
	pattern->set_variable("file_name",filename);
	pattern->messages.add("Begin reading stitches:");
	for (i=0;i<42;i++) {
		header[i]=fgetc(dstin);
	};

	st=(header[4]) + (header[5] << 8) + (header[6] << 16) + (header[7] << 24);
	numColors=(header[8]) + (header[9] << 8) + (header[10] << 16) + (header[11] << 24);
	//get the title
	//numColors2=2*numColors;
	pattern->messages.add("NumStitches:",st);
	pattern->messages.add("NumColors:",numColors);
	for (i=0;i<numColors;i++)
	{
		//decode and add colors
		char husColor=fgetc(dstin);
		fgetc(dstin);
		pattern->AddColor(RGB(cRGB[husColor][0],cRGB[husColor][1],cRGB[husColor][3]),cName[husColor],"");
		pattern->messages.add("color:",cName[husColor]);
	}

	//READ STITCH RECORDS

	flags=NORMAL;
	pattern->AddStitchRel((double)10 /1.0, (double) 0 /1.0, flags);
	flags=STOP;
	pattern->AddStitchRel((double)10 /1.0, (double) 10 /1.0, flags);
	flags=NORMAL;
	pattern->AddStitchRel((double)10 /1.0, (double) 10 /1.0, flags);
	flags=NORMAL;
	pattern->AddStitchRel((double)0 /1.0, (double) 0 /1.0, flags);
	flags=STOP;
	pattern->AddStitchRel((double)10 /1.0, (double) 10 /1.0, flags);
	flags=NORMAL;
	pattern->AddStitchRel((double)10 /1.0, (double) 0 /1.0, flags);
	flags=STOP;
	pattern->AddStitchRel((double)10 /1.0, (double) 10 /1.0, flags);
	flags=NORMAL;
	pattern->AddStitchRel((double)10 /1.0, (double) 0 /1.0, flags);
	flags=END;
	pattern->AddStitchRel((double)5 /1.0, (double) 5 /1.0, flags);
	fclose(dstin);
	pattern->messages.add("Done reading stitches:",pattern->stitches);

return(true);
};

virtual BOOL Write(class pattern *pattern, const char *filename)
{
	return false;
};

};