//analyze.cpp
//
// This file is a part of embroidermodder.
// This program is free software; you can use, redistribute, and/or modify it
// under the terms of the GNU General Puplic License (GPL) as published by
// the Free Software Foundation.  See the file license.txt for details.
// http://embroidermodder.sourceforge.net/
//

#include "stdafx.h"
#include <stdio.h>
#include <fcntl.h>
#include <io.h>
#include <math.h>
#include "pattern.h"
#include "helpers.h"
#include "embroidermodder.h"
#include "analyze.h"
#include "paint.h"
#include "MainFrm.h"
#include "IEmbroideryReader.h"

extern CEmbroidermodderApp theApp;



// how many degrees off straight is still straight?
#define STRAIGHT_LIMIT 5

void find_lines(class pattern *pattern) {
	class pattern lines;


	int started;
	int flags;
	int i;

//	double pi = 3.1415926535;
	if (pattern->stitches==0) {
		theApp.status.set("No design loaded.");
		return;
	};

	lines.clear();
	lines.set_variable("design_name",pattern->get_variable("design_name"));
	lines.set_variable("file_name",pattern->get_variable("file_name"));
	
	for(i=0;i<pattern->colors;i++) {
		lines.AddColor(pattern->colorlist[i].rgb,pattern->colorlist[i].description,pattern->colorlist[i].catalog_number);
	};

	//make sure all angle calculations are up to date.
	pattern->calculate_angles();

	started=0;
	for (i=0;i<pattern->stitches;i++) {
		flags=pattern->stitchlist[i].flags;

		if (started==0 && flags!=JUMP) {
			// combine all previous jumps, then place a zero length NORMAL to start the section
			lines.AddStitchAbs(pattern->stitchlist[i].xx,pattern->stitchlist[i].yy,JUMP); 
			lines.AddStitchRel(0.0,0.0,NORMAL);
			started=1;
		} else if (flags==JUMP) {
			started=0;
			// merge all jump stitches into one
		} else if (fabs(pattern->stitchlist[i].da)>STRAIGHT_LIMIT) {
			lines.AddStitchAbs(pattern->stitchlist[i].xx,pattern->stitchlist[i].yy,flags);
		} else {
			//straight stitch, delete
		};
	};
	lines.calculate_angles();
	IEmbroideryReader *reader = pattern->GetReaderByFileName("lines.csv");
	reader->Write(&lines,"lines.csv");
	free(reader);
	pattern->messages.add("Wrote file ","lines.csv");
};

/*
void analysis_dump(class pattern *pattern, char *filename) {

	double xx,yy,dx,dy;
	int flags;
	int i;

//	double pi = 3.1415926535;

//	class pattern nostraights;
//	class pattern straights;

//	FILE *fout;

//	fout = fopen(filename,"w");
//	if (fout==0) {
//		fprintf(stderr, "Error opening %s for write\n",filename);
//		exit(-1);
//	};

//	nostraights.initialize_pattern("nostraights");
//	straights.initialize_pattern("straights");
	
	xx=yy=0.0;
	for (i=0;i<pattern->stitches;i++) {
		dx=pattern->stitchlist[i].xx - xx;
		dy=pattern->stitchlist[i].yy - yy;
		xx=pattern->stitchlist[i].xx;
		yy=pattern->stitchlist[i].yy;
		flags=pattern->stitchlist[i].flags;

		//initialize all to 0 to be tidy.
		pattern->stitchlist[i].a=0;
		pattern->stitchlist[i].da=0;
//		pattern->stitchlist[i].dda=0;
		pattern->stitchlist[i].l=0;
//		pattern->stitchlist[i].dl=0;
//		pattern->stitchlist[i].ddl=0;

		if (i>0) pattern->stitchlist[i].a = atan2(dy,dx) *180.0/pi;
		if (i>0) pattern->stitchlist[i].l = sqrt(dx * dx + dy * dy);
		
		if (i>1) pattern->stitchlist[i-1].da = pattern->stitchlist[i].a-pattern->stitchlist[i-1].a;
//		if (i>1) pattern->stitchlist[i].dl = pattern->stitchlist[i].l-pattern->stitchlist[i-1].l;

//		if (i>2) pattern->stitchlist[i].dda = pattern->stitchlist[i].da-pattern->stitchlist[i-1].da;
//		if (i>2) pattern->stitchlist[i].ddl = pattern->stitchlist[i].dl-pattern->stitchlist[i-1].dl;

//		fprintf(fout,"%3d:%6.2lf,%6.2lf(%6.2lf,%6.2lf):%c:",i+1,dx,dy,xx,yy, flagstotext(flags)[0]);

//		fprintf(fout," l=%6.2lf, dl=%6.2lf; a=%6.2lf, da=%6.2lf:",
//			pattern->stitchlist[i].l,   pattern->stitchlist[i].dl,
//			pattern->stitchlist[i].ddl, pattern->stitchlist[i].a,
//			pattern->stitchlist[i].da, pattern->stitchlist[i].dda);

//		if (abs(round(pattern->stitchlist[i].da)) <5) {
//			fprintf(fout,"Straight");
//		} else {
//			nostraights.add_stitch_copy(pattern->stitchlist[i]);
//			if (abs(round(pattern->stitchlist[i].da)) <45) {
//				fprintf(fout,"Curve");
//			} else {
//				fprintf(fout,"Turn");
//			};
//		};
//		fprintf(fout,"\n");
	};

//	fclose (fout);
//	if (strcmp (filename,"nostraights_analysis.txt")!=0) {
//		analysis_dump(&nostraights,"nostraights_analysis.txt");
//	};
	find_lines(pattern);
};
*/
