#include "stdafx.h"
#include <stdio.h>
#include <fcntl.h>
#include <io.h>
#include <math.h>
#include "pattern.h"
#include "helpers.h"
#include "paint.h"
#include "MainFrm.h"
#include "Messaging.h"
#include "IEmbroideryReader.h"

extern CEmbroidermodderApp theApp;
class Pcs : public IEmbroideryReader
{
private:
double pcs_decode(unsigned char a1,unsigned char a2,unsigned char a3,unsigned char a4)
{
    int res = a1 + (a2 << 8) + (a3 << 16);
    if (res > 0x7FFFFF)
    {
        return (-((~(res) & 0x7FFFFF) - 1));
    }
    return res;
}

void pcs_encode(unsigned char *b,char dx,char dy,int flags)
{
	unsigned char rx=0;
	unsigned char ry=0;

	if (flags==JUMP)
	{
		b[0]=128;
		b[1]=2;
		b[2]=dx;
		b[3]=dy;
	}else if (flags==STOP)
	{
		b[0]=128;
		b[1]=1;
		b[2]=dx;
		b[3]=dy;
	}else{
		b[0]=dx;
		b[1]=dy;
	}
}
public:

virtual BOOL Read(class pattern *pattern, const char *filename) {
	FILE *dstin;
	int i=0;
	bool firstTime=true;
	unsigned char b[9];
	double dx=0,dy=0;
	int flags=0,st=0;
	dstin = fopen(filename,"r");

	if (dstin==0) {
		theApp.status.set("Error opening pcs file for read:",filename);
		pattern->messages.add("Error opening pcs file for read:",filename);
		return(false);
	};

	_setmode( _fileno( dstin ), _O_BINARY );

	pattern->clear();
	pattern->set_variable("file_name",filename);
	fseek (dstin,4,SEEK_SET);
	pattern->AddColor(RGB(0,0,0),"Random","");
	for(i=0;i<16;i++)
	{
		pattern->AddColor(RGB(fgetc(dstin),fgetc(dstin),fgetc(dstin)),"Random","");
		fgetc(dstin);
	}
	fseek (dstin,68,SEEK_SET);
	st=fgetc(dstin);
	st+=(fgetc(dstin) << 8);
	//pattern->messages.add("Begin reading stitches:",st);
	
	//READ STITCH RECORDS
	for (i=0;i<st;i++) {
		flags = NORMAL;
		b[0]=fgetc(dstin);
		if (feof(dstin)) break;
		b[1]=fgetc(dstin);
		if (feof(dstin)) break;
		b[2]=fgetc(dstin);
		if (feof(dstin)) break;
		b[3]=fgetc(dstin);
		if (feof(dstin)) break;
		b[4]=fgetc(dstin);
		if (feof(dstin)) break;
		b[5]=fgetc(dstin);
		if (feof(dstin)) break;
		b[6]=fgetc(dstin);
		if (feof(dstin)) break;
		b[7]=fgetc(dstin);
		if (feof(dstin)) break;
		b[8]=fgetc(dstin);
		if (feof(dstin)) break;

		if (b[8] == 3)
		{
			flags=STOP;
			dx=pcs_decode(b[1],b[2],b[3],b[8]);
			dy=pcs_decode(b[5],b[6],b[7],b[8]);
			pattern->AddStitchAbs((double)dx /10.0, (double) dy /10.0, flags);
		}else{
			dx=pcs_decode(b[1],b[2],b[3],b[8]);
			dy=pcs_decode(b[5],b[6],b[7],b[8]);
			pattern->AddStitchAbs((double)dx /10.0, (double) dy /10.0, flags);
		}
	};
	flags=END;
	pattern->AddStitchAbs((double)dx /10.0, (double) dy /10.0, flags);
	fclose(dstin);

	//pattern->print_stitchlist("cherry.txt");
	return(true);
};



virtual BOOL Write(class pattern *pattern, const char *filename) {
	FILE *pcsout;
	int xx=0,yy=0,dx=0,dy=0,flags=0;
	int i=0;
	unsigned char b[4];
	int inserts=0;

	if (pattern->stitches==0) {

		theApp.status.set("No file to save.");
		fprintf(stderr,"No file to save\n");
		return(false);

	};

	pcsout = fopen(filename,"w");
	if (pcsout==0) {
		theApp.status.set("Error opening pcs file for write:",filename);
		return(false);

	};
	_setmode( _fileno( pcsout ), _O_BINARY );
	//first pass through pattern calculating extents
	xx=yy=0;
	flags=NORMAL;
	for (i=0;flags!=END;i++){
		if (i>pattern->stitches) break;
		dx=round(pattern->stitchlist[i].xx*10.0) - xx;
		dy=round(pattern->stitchlist[i].yy*10.0) - yy;
	// insert jump point if out of range.
		if (abs(dx)>127 || abs(dy)>127) {
			double fxx,fyy,fdx,fdy;
			fxx=pattern->stitchlist[i-1].xx*10.0;
			// use doubles to do insert calculation
			fyy=pattern->stitchlist[i-1].yy*10.0;
			fdx=pattern->stitchlist[i].xx*10.0 - fxx;
			fdy=pattern->stitchlist[i].yy*10.0 - fyy;
			int splits; // number of stitches to split overlength one into
			if (abs(dx)>abs(dy)) {
				splits = round(ceil(fabs((double)dx)/127.0));
			} else {
				splits = round(ceil(fabs((double)dy)/127.0));
			};
			for (int j=1;j<splits;j++) {
				pattern->AddStitchAbs(fxx+fdx*j/splits,fyy+fdy*j/splits,JUMP);
				pattern->move_last_stitch(i+j-1);
				inserts++;
			};
		};
		xx=round(pattern->stitchlist[i].xx * 10.0); // convert from mm to 0.1mm for file format
		yy=round(pattern->stitchlist[i].yy * 10.0);
		flags=pattern->stitchlist[i].flags;
	};
	//write stitches
	xx=yy=0;
	for (i=0;i<pattern->stitches;i++) 
	{
		dx=round(pattern->stitchlist[i].xx*10.0) - xx;
		dy=round(pattern->stitchlist[i].yy*10.0) - yy;
		xx=round(pattern->stitchlist[i].xx*10.0);
		yy=round(pattern->stitchlist[i].yy*10.0);
		flags=pattern->stitchlist[i].flags;
		pcs_encode(b,dx,dy,flags);
		if ((b[0]==128) && ((b[1]==1) || (b[1]==2) || (b[1]==4)))
		{
			fprintf(pcsout,"%c%c%c%c",b[0],b[1],b[2],b[3]);
		}else{
			fprintf(pcsout,"%c%c",b[0],b[1]);
		};
	};
	//close file
	fclose(pcsout);
	return(true);
};
};