// EmbroideryView.h : interface of the CEmbroideryView class
//
// This sourcecode file is a part of embroidermodder.
// This program is free software; you can use, redistribute, and/or modify it
// under the terms of the GNU General Puplic License (GPL) as published by
// the Free Software Foundation.  See the file license.txt for details.
// http://embroidermodder.sourceforge.net/
//
/////////////////////////////////////////////////////////////////////////////

#if !defined(AFX_EMBROIDERYVIEW_H__2FF60CFD_F5D1_42A6_B776_0D97B8051CA3__INCLUDED_)
#define AFX_EMBROIDERYVIEW_H__2FF60CFD_F5D1_42A6_B776_0D97B8051CA3__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#include "EmbroideryDoc.h"
#include "helpers.h"

// Hints passed to Update() or UpdateAllViews()
#define HINT_PATTERN_CHANGED 6
#define HINT_PATTERN_CHANGED_SIZE 1
#define HINT_INVALIDATE_PRECT 2
#define HINT_INVALIDATE_SELECT_STITCH 3
#define HINT_REMEMBER_THIS_SCROLL_POINT 4
#define HINT_RESET_TO_STORED_SCROLL_POINT 5

// Current user interface mode
#define MOUSEMODE_IDLE 0
#define MOUSEMODE_SELECT 100
#define MOUSEMODE_MOVE 200
#define MOUSEMODE_MOVE_POINT 250
#define MOUSEMODE_DELETE 300

// Mouse message that triggered a call to MouseMessageHandler()
#define MOUSEMESSAGE_LDOWN 1
#define MOUSEMESSAGE_LUP 2
#define MOUSEMESSAGE_RDOWN 3
#define MOUSEMESSAGE_RUP 4
#define MOUSEMESSAGE_MOVE 5
#define MOUSEMESSAGE_KEYDOWN 6
#define MOUSEMESSAGE_CANCELMODE 7
#define MOUSEMESSAGE_LDBLCLK 8
#define MOUSEMESSAGE_RDBLCLK 9

// Parameters that indicate how we will show selected stuff
#define SELECT_STITCH_CIRCLE_RADIUS 10
#define SELECTED_POINTS_CIRCLE_RADIUS 4

// Helpers for decoding if keys held down during mouse functions.
// Much easier to read than the logic statements.
#define CONTROL_HELD(flags) (((flags)&MK_CONTROL) != 0)
#define SHIFT_HELD(flags) (((flags)&MK_SHIFT) != 0)


class CEmbroideryView : public CScrollView
{
protected: // create from serialization only
	CEmbroideryView();
	DECLARE_DYNCREATE(CEmbroideryView);

// Variables
public:
	bool initialupdatecomplete; // flag allowing us to ignore some early messages (like OnSize)
	int mousemode;
	bool ldrag;	// flags indicating a left or right button drag is happening
	bool rdrag;
	CPoint ldownpoint;	// screen position of mouse button down point
	CPoint rdownpoint;

	bool printing;		// flags to indicate if we are printing or generating a bitmap.
	bool bitmapping;
	bool usebitmap;		// true if we want to try to use bitmap.
	bool bitmapcomplete;// true if the bitmap is completely rendered
	int bitmapstitched;	// stitch number indicating how far we've rendered bitmap
	CDC *bitmap_dc;
	CPoint bitblt_offset;

	CRect pagearea;		// describes the printable area of the printed page.
	double viewzoom;	// 1.0 = actual size
	double ppi;			// pixels per inch (ie. 60 for a normal monitor, may vary for printout)
	CSize viewdimensions;	// size of 'sheet' to scroll around on
	CDC *mdc_temp_bitmap;	// DC for a temporary bitmap.  NULL when no space allocated.
	double scale;	// pre-calculated values for conversion to screen coordinates
	CPoint offset;
	lfVector poffset;
	lfVector oldcenter;	// used in OnUpdate, unique to each view
	bool display_jumps;	// true if we want jumps drawn.

// Attributes
public:
	CEmbroideryDoc* GetDocument();

// Operations
public:
	void MouseMessageHandler(int action, UINT nFlags, CPoint point, UINT nChar=0);
	void PopupMenu(CPoint point);

// Routines are in paint.cpp
	void set_viewdimensions(void);
	void calculate_scale_and_offset (void);

	CPoint pattern_point_to_screen_point (class lfVector patternpt);
	class lfVector screen_point_to_pattern_point (CPoint screenpt);
	CRect pattern_rect_to_screen_rect (lfRect patternrect);
	lfRect screen_rect_to_pattern_rect (CRect srect);

	class lfVector GetPatternPointAtScreenCenter (void);
	void ScrollToPatternPoint(lfVector ppoint);

	void paint_pattern (CDC *dc, class pattern *pattern);
	void paint_bitmap (CDC *dc, int worktime_ms);
	void paint_messages (CDC *dc, class messages *messages);
	void DrawSelectRectangle (CRect rect, bool on=TRUE);
	void DrawCircle(CDC *dc, CPoint center, int radius, int steps);
	void draw_ghost_selection(CPoint offset_amt, bool on=TRUE);

	void copy_screen_to_bitmap (CDC *mdc, CRect sregion);
	void copy_bitmap_to_screen (CDC *mdc, CRect sregion);
	CDC *create_bitmap (CSize size);
	CDC *free_bitmap (CDC *mdc);	// will always return a null pointer

// Routines are in fonts.cpp
	void DrawFont(CDC* pDC, LOGFONT lf, const char *text, lfVector ppoint);
	void PolyDraw(CDC* pDC, CONST LPPOINT lppt, CONST LPBYTE lpbTypes, int cCount);


// Overrides
	// ClassWizard generated virtual function overrides
	//{{AFX_VIRTUAL(CEmbroideryView)
	public:
	virtual BOOL PreCreateWindow(CREATESTRUCT& cs);
	virtual BOOL OnScroll(UINT nScrollCode, UINT nPos, BOOL bDoScroll = TRUE);
	protected:
	virtual void OnInitialUpdate(); // called first time after construct
	virtual BOOL OnPreparePrinting(CPrintInfo* pInfo);
	virtual void OnBeginPrinting(CDC* pDC, CPrintInfo* pInfo);
	virtual void OnEndPrinting(CDC* pDC, CPrintInfo* pInfo);
	virtual void OnActivateView(BOOL bActivate, CView* pActivateView, CView* pDeactiveView);
	virtual void OnPrint(CDC* pDC, CPrintInfo* pInfo);
	virtual void OnDraw(CDC* pDC);
	virtual void OnUpdate(CView* pSender, LPARAM lHint, CObject* pHint);
	//}}AFX_VIRTUAL

// Implementation
public:
	virtual ~CEmbroideryView();
#ifdef _DEBUG
	virtual void AssertValid() const;
	virtual void Dump(CDumpContext& dc) const;
#endif

protected:

// Generated message map functions
protected:
	//{{AFX_MSG(CEmbroideryView)
	afx_msg void OnPaint();
	afx_msg void OnLButtonDown(UINT nFlags, CPoint point);
	afx_msg void OnRButtonDown(UINT nFlags, CPoint point);
	afx_msg void OnMouseMove(UINT nFlags, CPoint point);
	afx_msg void OnLButtonUp(UINT nFlags, CPoint point);
	afx_msg void OnRButtonUp(UINT nFlags, CPoint point);
	afx_msg void OnZoomIn();
	afx_msg void OnZoomOut();
	afx_msg void OnZoomFit();
	afx_msg void OnZoomSelection();
	afx_msg void OnZoom1to1();
	afx_msg void OnSize(UINT nType, int cx, int cy);
	afx_msg void OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags);
	afx_msg void OnCancelMode();
	afx_msg void OnLButtonDblClk(UINT nFlags, CPoint point);
	afx_msg void OnDeletepoint();
	afx_msg void OnConverttojump();
	afx_msg void OnConverttonormal();
	afx_msg void OnDisplayJumps();
	afx_msg void OnUpdateDisplayJumps(CCmdUI* pCmdUI);
	afx_msg void OnEditAddlettering();
	//}}AFX_MSG
	DECLARE_MESSAGE_MAP()
};

#ifndef _DEBUG  // debug version in EmbroideryView.cpp
inline CEmbroideryDoc* CEmbroideryView::GetDocument()
   { return (CEmbroideryDoc*)m_pDocument; }
#endif

/////////////////////////////////////////////////////////////////////////////

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_EMBROIDERYVIEW_H__2FF60CFD_F5D1_42A6_B776_0D97B8051CA3__INCLUDED_)
