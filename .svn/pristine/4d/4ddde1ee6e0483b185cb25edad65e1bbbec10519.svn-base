#include "stdafx.h"
#include <stdio.h>
#include <fcntl.h>
#include <io.h>
#include <math.h>
#include "Thread.h"
#include "pattern.h"
#include "helpers.h"
#include "paint.h"
#include "MainFrm.h"
#include "Messaging.h"
#include <list>
#include "Point.h"
#include "StitchBlock.h"
#include <list>
#include <vector>
#include "IEmbroideryReader.h"

using namespace std;

extern CEmbroidermodderApp theApp;
// Procedures
class Pes : public IEmbroideryReader
{
private:
vector<Thread> ThreadColors;

short PecDecodeNormal(unsigned char inputByte)
{
	if (inputByte < 0x40)
	{
		return inputByte;
	}
	return (inputByte - 0x80);
}

int PecJumpDecode(byte byte1, byte byte2)
{
	byte n1 = (byte)(byte1 & 0x0F);
	if (n1 <= 7)
	{
		int returnValue = (n1 << 8) + byte2;
		return (returnValue);
	}
	else
	{
		int returnValue = -((256 - byte2) + ((15 - n1) << 8));
		return (returnValue);
	}
}

long ReadInt32(FILE *inputFile)
{
	int x =	fgetc(inputFile);
	x |= fgetc(inputFile) << 8;
	x |= fgetc(inputFile) << 16;
	x |= fgetc(inputFile) << 24;
	return x;
}

short ReadInt16(FILE *inputFile)
{
	short x = fgetc(inputFile);
	x |= fgetc(inputFile) << 8;
	return x;
}

void BuildColorTable()
{
	if (ThreadColors.size() == 0)
	{                                   
		ThreadColors.push_back(Thread(RGB(0, 0, 0), "Unknown", ""));
		ThreadColors.push_back(Thread(RGB(14, 31, 124), "Prussian Blue", ""));
		ThreadColors.push_back(Thread(RGB(10, 85, 163), "Blue", ""));
		ThreadColors.push_back(Thread(RGB(0, 135, 119), "Teal Green", ""));
		ThreadColors.push_back(Thread(RGB(75, 107, 175), "Cornflower Blue", ""));
		ThreadColors.push_back(Thread(RGB(237, 23, 31), "Red", ""));
		ThreadColors.push_back(Thread(RGB(209, 92, 0), "Reddish Brown", ""));
		ThreadColors.push_back(Thread(RGB(145, 54, 151), "Magenta", ""));
		ThreadColors.push_back(Thread(RGB(228, 154, 203), "Light Lilac", ""));
		ThreadColors.push_back(Thread(RGB(145, 95, 172), "Lilac", ""));
		ThreadColors.push_back(Thread(RGB(158, 214, 125), "Mint Green", ""));
		ThreadColors.push_back(Thread(RGB(232, 169, 0), "Deep Gold", ""));
		ThreadColors.push_back(Thread(RGB(254, 186, 53), "Orange", ""));
		ThreadColors.push_back(Thread(RGB(255, 255, 0), "Yellow", ""));
		ThreadColors.push_back(Thread(RGB(112, 188, 31), "Lime Green", ""));
		ThreadColors.push_back(Thread(RGB(186, 152, 0), "Brass", ""));
		ThreadColors.push_back(Thread(RGB(168, 168, 168), "Silver", ""));
		ThreadColors.push_back(Thread(RGB(125, 111, 0), "Russet Brown", ""));
		ThreadColors.push_back(Thread(RGB(255, 255, 179), "Cream Brown", ""));
		ThreadColors.push_back(Thread(RGB(79, 85, 86), "Pewter", ""));
		ThreadColors.push_back(Thread(RGB(0, 0, 0), "Black", ""));
		ThreadColors.push_back(Thread(RGB(11, 61, 145), "Ultramarine", ""));
		ThreadColors.push_back(Thread(RGB(119, 1, 118), "Royal Purple", ""));
		ThreadColors.push_back(Thread(RGB(41, 49, 51), "Dark Gray", ""));
		ThreadColors.push_back(Thread(RGB(42, 19, 1), "Dark Brown", ""));
		ThreadColors.push_back(Thread(RGB(246, 74, 138), "Deep Rose", ""));
		ThreadColors.push_back(Thread(RGB(178, 118, 36), "Light Brown", ""));
		ThreadColors.push_back(Thread(RGB(252, 187, 197), "Salmon Pink", ""));
		ThreadColors.push_back(Thread(RGB(254, 55, 15), "Vermillion", ""));
		ThreadColors.push_back(Thread(RGB(240, 240, 240), "White", ""));
		ThreadColors.push_back(Thread(RGB(106, 28, 138), "Violet", ""));
		ThreadColors.push_back(Thread(RGB(168, 221, 196), "Seacrest", ""));
		ThreadColors.push_back(Thread(RGB(37, 132, 187), "Sky Blue", ""));
		ThreadColors.push_back(Thread(RGB(254, 179, 67), "Pumpkin", ""));
		ThreadColors.push_back(Thread(RGB(255, 243, 107), "Cream Yellow", ""));
		ThreadColors.push_back(Thread(RGB(208, 166, 96), "Khaki", ""));
		ThreadColors.push_back(Thread(RGB(209, 84, 0), "Clay Brown", ""));
		ThreadColors.push_back(Thread(RGB(102, 186, 73), "Leaf Green", ""));
		ThreadColors.push_back(Thread(RGB(19, 74, 70), "Peacock Blue", ""));
		ThreadColors.push_back(Thread(RGB(135, 135, 135), "Gray", ""));
		ThreadColors.push_back(Thread(RGB(216, 204, 198), "Warm Gray", ""));
		ThreadColors.push_back(Thread(RGB(67, 86, 7), "Dark Olive", ""));
		ThreadColors.push_back(Thread(RGB(253, 217, 222), "Flesh Pink", ""));
		ThreadColors.push_back(Thread(RGB(249, 147, 188), "Pink", ""));
		ThreadColors.push_back(Thread(RGB(0, 56, 34), "Deep Green", ""));
		ThreadColors.push_back(Thread(RGB(178, 175, 212), "Lavender", ""));
		ThreadColors.push_back(Thread(RGB(104, 106, 176), "Wisteria Violet", ""));
		ThreadColors.push_back(Thread(RGB(239, 227, 185), "Beige", ""));
		ThreadColors.push_back(Thread(RGB(247, 56, 102), "Carmine", ""));
		ThreadColors.push_back(Thread(RGB(181, 75, 100), "Amber Red", ""));
		ThreadColors.push_back(Thread(RGB(19, 43, 26), "Olive Green", ""));
		ThreadColors.push_back(Thread(RGB(199, 1, 86), "Dark Fuschia", ""));
		ThreadColors.push_back(Thread(RGB(254, 158, 50), "Tangerine", ""));
		ThreadColors.push_back(Thread(RGB(168, 222, 235), "Light Blue", ""));
		ThreadColors.push_back(Thread(RGB(0, 103, 62), "Emerald Green", ""));
		ThreadColors.push_back(Thread(RGB(78, 41, 144), "Purple", ""));
		ThreadColors.push_back(Thread(RGB(47, 126, 32), "Moss Green", ""));
		ThreadColors.push_back(Thread(RGB(255, 204, 204), "Flesh Pink", ""));
		ThreadColors.push_back(Thread(RGB(255, 217, 17), "Harvest Gold", ""));
		ThreadColors.push_back(Thread(RGB(9, 91, 166), "Electric Blue", ""));
		ThreadColors.push_back(Thread(RGB(240, 249, 112), "Lemon Yellow", ""));
		ThreadColors.push_back(Thread(RGB(227, 243, 91), "Fresh Green", ""));
		ThreadColors.push_back(Thread(RGB(255, 153, 0), "Orange", ""));
		ThreadColors.push_back(Thread(RGB(255, 240, 141), "Cream Yellow", ""));
		ThreadColors.push_back(Thread(RGB(255, 200, 200), "Applique", ""));
	}
};

public:

virtual BOOL Read(class pattern *pattern, const char *filename)
{
	BuildColorTable();
	FILE *dstin;

	dstin = fopen(filename,"r");
	_setmode(_fileno(dstin), _O_BINARY ); 
	list<stitchBlock> blocks;
	int imageWidth, imageHeight;
	Point translateStart;

	fseek(dstin, 8, SEEK_SET);     
	int pecstart = ReadInt32(dstin);

	fseek(dstin, pecstart + 48, SEEK_SET);
	int numColors = fgetc(dstin) + 1;

	vector<byte> colorList;
	for (int x = 0; x < numColors; x++)
	{
		colorList.push_back((byte)fgetc(dstin));
	}

	fseek(dstin, pecstart + 532, SEEK_SET);
	bool thisPartIsDone = false;
	stitchBlock curBlock;
	int prevX = 0;
	int prevY = 0;
	int maxX = 0;
	int minX = 0;
	int maxY = 0;
	int minY = 0;
	int colorNum = -1;
	int colorIndex = 0;
	list<Point> tempStitches;
	while (!thisPartIsDone)
	{
		byte val1;
		byte val2;
		val1 = fgetc(dstin);
		val2 = fgetc(dstin);
		if (val1 == 255 && val2 == 0)
		{
			//end of stitches
			thisPartIsDone = true;

			//add the last block
			curBlock = stitchBlock();
			curBlock.stitches = list<Point>(tempStitches);
			curBlock.StitchesTotal = tempStitches.size();
			colorNum++;
			colorIndex = (int) colorList[colorNum];
			curBlock.ColorIndex = colorIndex;
			curBlock.Color = ThreadColors[colorIndex].Color; // getColorFromIndex(colorIndex);
			blocks.push_back(curBlock);
		}
		else if (val1 == 254 && val2 == 176)
		{
			//color switch, start a new block

			curBlock = stitchBlock();
			curBlock.stitches = list<Point>(tempStitches);
			curBlock.StitchesTotal = tempStitches.size();
			colorNum++;
			colorIndex = (int) colorList[colorNum];
			curBlock.ColorIndex = colorIndex;
			curBlock.Color = ThreadColors[colorIndex].Color;
			blocks.push_back(curBlock);

			tempStitches = list<Point>();

			//read useless(?) byte
			fgetc(dstin);
		}
		else
		{
			int deltaX = 0;
			int deltaY = 0;
			if ((val1 & 0x80) == 0x80)
			{
				//this is a jump stitch
				deltaX = ((val1 & 0x0F) << 8) + val2;
				if ((deltaX & 2048) == 0x800)
				{
					deltaX -= 0x1000;
				}
				//read next byte for Y value
				val2 = fgetc(dstin);
			}
			else
			{
				//normal stitch
				deltaX = val1;
				if (deltaX > 0x3F)
				{
					deltaX -= 0x80;
				}
			}

			if ((val2 & 0x80) == 0x80)
			{
				//this is a jump stitch
				int val3 = fgetc(dstin);
				deltaY = ((val2 & 0x0F) << 8) + val3;
				if ((deltaY & 0x800) == 0x800)
				{
					deltaY -= 0x1000;
				}
			}
			else
			{
				//normal stitch
				deltaY = val2;
				if (deltaY > 0x3F)
				{
					deltaY -= 0x80;
				}
			}
			tempStitches.push_back(Point(prevX + deltaX, prevY + deltaY));
			prevX = prevX + deltaX;
			prevY = prevY + deltaY;
			if (prevX > maxX)
			{
				maxX = prevX;
			}
			else if (prevX < minX)
			{
				minX = prevX;
			}

			if (prevY > maxY)
			{
				maxY = prevY;
			}
			else if (prevY < minY)
			{
				minY = prevY;
			}
		}
	}
	imageWidth = maxX - minX;
	imageHeight = maxY - minY;
	translateStart= Point(-minX, minY);

	for(list<stitchBlock>::const_iterator it = blocks.begin(); it != blocks.end(); ++it)
	{
		bool firstStitch = true;
		stitchBlock block = *it;
		pattern->AddColor(ThreadColors[block.ColorIndex].Color, "", "");

		for(list<Point>::const_iterator it2 = block.stitches.begin(); it2 != block.stitches.end(); ++it2)
		{
			Point p = *it2;
			if (firstStitch)
			{
				pattern->AddStitchAbs(p.getX() * 10.0, p.getY() * 10.0, JUMP);
				firstStitch = false;
			}
			else
			{
				pattern->AddStitchAbs(p.getX() * 10.0, p.getY() * 10.0, NORMAL);
			}
		}
		pattern->AddStitchRel(0, 0, STOP);
	}
	pattern->CalculateBoundingBox();
	pattern->InvertPatternVertical();
	fclose(dstin);
	return(true);
};

virtual BOOL Write(class pattern *pattern, const char *filename) 
{
	return false;
}

};