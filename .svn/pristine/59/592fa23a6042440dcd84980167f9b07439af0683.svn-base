//pattern.h
//
// This sourcecode file is a part of embroidermodder.
// This program is free software; you can use, redistribute, and/or modify it
// under the terms of the GNU General Puplic License (GPL) as published by
// the Free Software Foundation.  See the file license.txt for details.
// http://embroidermodder.sourceforge.net/
//

#if !defined(PATTERN_H__INCLUDED_)
#define PATTERN_H__INCLUDED_

#include "Messaging.h"
#include "helpers.h"
#include "IEmbroideryReader.h"

struct pattern_config {
	int format;
	double scale;

	void clear(void);
};

struct stitch {
	int flags;	// uses codes defined below
	double xx;		// absolute position (not relative)
	double yy;		

	int color;	// color number for this stitch

	double a;		// angle into this node
	double da;		// angle out - angle in
	double l;		// length into this node

	bool selected;	// indicates this stitch is part of current selection

//	double a(void);		// calculate angle into this node
//	double da(void);	// calculate angle out - angle in
//	double l(void);		// calculate length into this node
	class lfVector point(void) {
		return (lfVector(xx,yy));
	};
};

struct color {
	COLORREF rgb;
	char *description;
	char *catalog_number;
};

class pattern {
public:
	int stitches;
	int colors;
	int num_variables;

	struct stitch *stitchlist;
	struct color *colorlist;

	char **variable_name;
	char **variable_value;

	struct pattern_config config;

	int edit_stitch_num;

	class messages messages;

private:
	int allocated_stitches;
	int allocated_colors;
	int allocated_variables;

public:
	pattern();	// constructor
	~pattern();	// destructor
	void clear();
	void set_variable(const char *name, const char *value);
	char *get_variable(const char *name) const;
	int get_variable_int(const char *name) const;
	double get_variable_double(const char *name) const;
	void delete_variable(const char *name);
    int AddColor(COLORREF rgb, const char *description, const char *catalog_number);
	int AddStitchAbs(double x, double y, int flags, bool selected=FALSE);
	int AddStitchRel(double dx, double dy, int flags, bool selected=FALSE);
	int AddStitchCopy(struct stitch src, bool selected=FALSE);
	int delete_stitch (int number);
	int move_last_stitch (int number);
	int delete_selected (void);
//	void print_stitchlist(char *filename);
	int find_nearest_stitch(double x, double y, int doc_selectmode);
	void clear_selection (void);
	void select_all(void);
	void select_color(int color);
	void select_stitch(int stitch, bool select=TRUE);
	int CountSelected(void);
	class lfRect get_select_bounds(int doc_selectmode);
	int get_color_of_stitch (int stitch);
	void CalculateBoundingBox();
	RECT BoundingRect;
	void InvertPatternVertical();

	IEmbroideryReader *GetReaderByFileName(const char *filename);
	BOOL Read(const char *filename);
	BOOL Write(const char *filename);

	void scale_pattern(double scale);
	void statistics(void);
	void create_test(void);
	class lfRect get_dimensions(void); 
	void calculate_angles(void);
};

// Codes for stitch types (in struct stitch.flags)

#define NORMAL 0
#define UNKNOWN 1
#define JUMP 2
#define STOP 3
#define END 4
#define LINE 10
#define SATINLINE 11
#define ZIGZAGLINE 12
#define REGION 13
#define TRIANGLE 14

#endif