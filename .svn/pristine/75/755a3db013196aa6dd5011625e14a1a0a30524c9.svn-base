// MainFrm.cpp : implementation of the CMainFrame class
//
// This sourcecode file is a part of embroidermodder.
// This program is free software; you can use, redistribute, and/or modify it
// under the terms of the GNU General Puplic License (GPL) as published by
// the Free Software Foundation.  See the file license.txt for details.
// http://embroidermodder.sourceforge.net/
//

#include "stdafx.h"
#include "embroidermodder.h"

#include "MainFrm.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

/////////////////////////////////////////////////////////////////////////////
// CMainFrame

IMPLEMENT_DYNAMIC(CMainFrame, CMDIFrameWnd)

	BEGIN_MESSAGE_MAP(CMainFrame, CMDIFrameWnd)
		//{{AFX_MSG_MAP(CMainFrame)
		// NOTE - the ClassWizard will add and remove mapping macros here.
		//    DO NOT EDIT what you see in these blocks of generated code !
		ON_WM_CREATE()
		//}}AFX_MSG_MAP
		// Global help commands
		ON_COMMAND(ID_HELP_FINDER, CMDIFrameWnd::OnHelpFinder)
		ON_COMMAND(ID_HELP, CMDIFrameWnd::OnHelp)
		ON_COMMAND(ID_CONTEXT_HELP, CMDIFrameWnd::OnContextHelp)
		ON_COMMAND(ID_DEFAULT_HELP, CMDIFrameWnd::OnHelpFinder)
	END_MESSAGE_MAP()

	static UINT indicators[] =
	{
		ID_SEPARATOR,           // status line indicator
		ID_INDICATOR_SIZE,
		ID_INDICATOR_SCALE,
		ID_INDICATOR_COLORS,
		ID_INDICATOR_FORMAT,
		//	ID_SEPARATOR,           // status line indicator
		//	ID_INDICATOR_CAPS,
		//	ID_INDICATOR_NUM,
		//	ID_INDICATOR_SCRL,
	};

	/////////////////////////////////////////////////////////////////////////////
	// CMainFrame construction/destruction

	CMainFrame::CMainFrame()
	{
		// TODO: add member initialization code here

	}

	CMainFrame::~CMainFrame()
	{
	}

	int CMainFrame::OnCreate(LPCREATESTRUCT lpCreateStruct)
	{
		if (CMDIFrameWnd::OnCreate(lpCreateStruct) == -1)
			return -1;

		// Create several ToolBars, then attach them to a ReBar
		if (!m_wndToolBar.CreateEx(this) ||
			!m_wndToolBar.LoadToolBar(IDR_MAINFRAME))
		{
			TRACE0("Failed to create toolbar\n");
			return -1;      // fail to create
		}

		if (!m_wndZoomToolBar.CreateEx(this) ||
			!m_wndZoomToolBar.LoadToolBar(IDR_ZOOM_TOOLBAR))
		{
			TRACE0("Failed to create toolbar\n");
			return -1;      // fail to create
		}

		if (!m_wndModeToolBar.CreateEx(this) ||
			!m_wndModeToolBar.LoadToolBar(IDR_MODE_TOOLBAR))
		{
			TRACE0("Failed to create toolbar\n");
			return -1;      // fail to create
		}

		//	if (!m_wndDlgBar.Create(this, IDR_MAINFRAME, 
		//		CBRS_ALIGN_TOP, AFX_IDW_DIALOGBAR))
		//	{
		//		TRACE0("Failed to create dialogbar\n");
		//		return -1;		// fail to create
		//	}

		// Create a ReBar that contains all the ToolBars
		if (!m_wndReBar.Create(this) ||
			!m_wndReBar.AddBar(&m_wndToolBar) ||
			//		!m_wndReBar.AddBar(&m_wndDlgBar))
			!m_wndReBar.AddBar(&m_wndModeToolBar) ||
			!m_wndReBar.AddBar(&m_wndZoomToolBar))
		{
			TRACE0("Failed to create rebar\n");
			return -1;      // fail to create
		}


		// Status bar:
		if (!m_wndStatusBar.Create(this) ||
			!m_wndStatusBar.SetIndicators(indicators,
			sizeof(indicators)/sizeof(UINT)))
		{
			TRACE0("Failed to create status bar\n");
			return -1;      // fail to create
		}

		// TODO: Remove this if you don't want tool tips
		m_wndToolBar.SetBarStyle(m_wndToolBar.GetBarStyle() |
			CBRS_TOOLTIPS | CBRS_FLYBY | CBRS_SIZE_FIXED);
		m_wndModeToolBar.SetBarStyle(m_wndModeToolBar.GetBarStyle() |
			CBRS_TOOLTIPS | CBRS_FLYBY | CBRS_SIZE_FIXED);
		m_wndZoomToolBar.SetBarStyle(m_wndZoomToolBar.GetBarStyle() |
			CBRS_TOOLTIPS | CBRS_FLYBY | CBRS_SIZE_FIXED);

		return 0;
	}

	BOOL CMainFrame::PreCreateWindow(CREATESTRUCT& cs)
	{
		if( !CMDIFrameWnd::PreCreateWindow(cs) )
			return FALSE;
		// TODO: Modify the Window class or styles here by modifying
		//  the CREATESTRUCT cs

		return TRUE;
	}

	/////////////////////////////////////////////////////////////////////////////
	// CMainFrame diagnostics

#ifdef _DEBUG
	void CMainFrame::AssertValid() const
	{
		CMDIFrameWnd::AssertValid();
	}

	void CMainFrame::Dump(CDumpContext& dc) const
	{
		CMDIFrameWnd::Dump(dc);
	}

#endif //_DEBUG

	/////////////////////////////////////////////////////////////////////////////
	// CMainFrame message handlers

